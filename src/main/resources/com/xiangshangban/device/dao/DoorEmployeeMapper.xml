<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiangshangban.device.dao.DoorEmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.xiangshangban.device.bean.DoorEmployee" >
    <id column="employee_id" property="employeeId" jdbcType="VARCHAR" />
    <result column="employee_name" property="employeeName" jdbcType="VARCHAR" />
    <result column="door_id" property="doorId" jdbcType="VARCHAR" />
    <result column="door_name" property="doorName" jdbcType="VARCHAR" />
    <result column="range_flag_id" property="rangeFlagId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    employee_id, employee_name, door_id, door_name, range_flag_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from door_employee
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from door_employee
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    insert into door_employee (employee_id, employee_name, door_id, 
      door_name, range_flag_id)
    values (#{employeeId,jdbcType=VARCHAR}, #{employeeName,jdbcType=VARCHAR}, #{doorId,jdbcType=VARCHAR}, 
      #{doorName,jdbcType=VARCHAR}, #{rangeFlagId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    insert into door_employee
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="employeeId != null" >
        employee_id,
      </if>
      <if test="employeeName != null" >
        employee_name,
      </if>
      <if test="doorId != null" >
        door_id,
      </if>
      <if test="doorName != null" >
        door_name,
      </if>
      <if test="rangeFlagId != null" >
        range_flag_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="employeeId != null" >
        #{employeeId,jdbcType=VARCHAR},
      </if>
      <if test="employeeName != null" >
        #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="doorId != null" >
        #{doorId,jdbcType=VARCHAR},
      </if>
      <if test="doorName != null" >
        #{doorName,jdbcType=VARCHAR},
      </if>
      <if test="rangeFlagId != null" >
        #{rangeFlagId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    update door_employee
    <set >
      <if test="employeeName != null" >
        employee_name = #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="doorId != null" >
        door_id = #{doorId,jdbcType=VARCHAR},
      </if>
      <if test="doorName != null" >
        door_name = #{doorName,jdbcType=VARCHAR},
      </if>
      <if test="rangeFlagId != null" >
        range_flag_id = #{rangeFlagId,jdbcType=VARCHAR},
      </if>
    </set>
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    update door_employee
    set employee_name = #{employeeName,jdbcType=VARCHAR},
      door_id = #{doorId,jdbcType=VARCHAR},
      door_name = #{doorName,jdbcType=VARCHAR},
      range_flag_id = #{rangeFlagId,jdbcType=VARCHAR}
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </update>

  <!--非自动生成-->

  <select id="findIfExist" resultMap="BaseResultMap" parameterType="com.xiangshangban.device.bean.DoorEmployee">
    SELECT * FROM door_employee
    WHERE 1=1
    <if test="doorId != null and doorId != ''" >
      AND door_id = #{doorId,jdbcType=VARCHAR}
    </if>
    <if test="doorName != null and doorName != ''" >
      AND door_name = #{doorName,jdbcType=VARCHAR}
    </if>
    <if test="employeeId != null and employeeId != ''" >
      AND employee_id = #{employeeId,jdbcType=VARCHAR}
    </if>
    <if test="employeeName != null and employeeName != ''" >
      AND employee_name = #{employeeName,jdbcType=VARCHAR}
    </if>
  </select>

  <!--###############<授权中心>####################-->
  <!--查询门所关联的人员的信息：手机号、人脸、NFC数量-->
  <select id="queryDoorEmployeeInfo" parameterType="Map" resultType="map">

    SELECT
    A .door_id,
    COALESCE (door_name,'未命名') AS door_name,
    COALESCE (B.employee_phone,'') AS employee_phone,
    COALESCE (employee_face,'') AS employee_face,
    COALESCE (employee_nfc,'') AS employee_nfc
    FROM
    door_employee A,
    employee_ B
    WHERE
    A .employee_id = B.employee_id
      <if test="doorName!=null and doorName!=''">
        and A.door_name like #{doorEmployee.doorName}
      </if>
      <if test="companyId!=null and  companyId!=''">
        and B.employee_company_id = #{companyId}
      </if>
    order by CAST (A.door_id as INTEGER )
  </select>

  <!--查询门的命令下发的时间-->
  <select id="selectSendTime" parameterType="String" resultType="map">
    SELECT
    device_id,
    MAX (send_time) sendtime
    FROM
    door_cmd
    WHERE
    action_code IN ('2001', '3001')
    AND device_id IN (
    SELECT
    device_id
    FROM
    door_
     <where>
       <if test="doorName!=null and doorName!=''">
         door_name like #{doorName}
       </if>
     </where>
   )
   group by device_id
  </select>


  <!--根据设备id查询门的id-->
  <select id="selectDoorIdByDeviceId" parameterType="String" resultType="String">
   SELECT
	door_id
   FROM
        door_
   WHERE
        device_id = #{ deviceId }
  </select>

  <!--查询门关联的用户的权限信息(首页展示周一最早的开门时间段)-->
  <select id="selectRelateEmpPermissionInfo" parameterType="Map" resultType="map">
    SELECT
    Q.*
    FROM
    (
    SELECT
    F.*
    FROM
    (
    SELECT DISTINCT
    W.*, Y.status
    FROM
    (
    SELECT
    DISTINCT S.*, X.lasttime
    FROM
    (
    SELECT
    A .employee_id,
    COALESCE (day_of_week, '') AS day_of_week,
    COALESCE (range_start_time, '') AS range_start_time,
    COALESCE (range_end_time, '') AS range_end_time,
    COALESCE (range_door_open_type, '') AS range_door_open_type,
    COALESCE (B.employee_name, '') AS employee_name,
    COALESCE (employee_department_name,'') AS employee_department_name
    FROM
    time_range_common_employee A
    LEFT JOIN employee_ B
    ON A .employee_id = B.employee_id
    WHERE
    A .day_of_week = '1'
    AND A .employee_id IN (
    SELECT
    employee_id
    FROM
    door_employee
    WHERE
    door_id = #{doorId}
    )
    ) S
    LEFT JOIN (
    SELECT
    employee_id,
    MAX (send_time) lasttime
    FROM
    door_cmd
    WHERE
    action_code in ('2002','3001')
    AND status not in('4','5','6')
    GROUP BY
    employee_id
    ) X ON S.employee_id = X.employee_id
    ) W
    LEFT JOIN (
    SELECT
    status,
    send_time
    FROM
    door_cmd
    ) Y ON W.lasttime = Y.send_time

    ) F

    WHERE
    F.employee_id IN (
    SELECT
    H.employee_id
    FROM
    (
    SELECT
    employee_id,
    MIN (range_start_time) earlytime
    FROM
    time_range_common_employee
    WHERE
    day_of_week = '1'
    GROUP BY
    employee_id
    ) H
    )
    AND F.range_start_time IN (
    SELECT
    H.earlytime
    FROM
    (
    SELECT
    employee_id,
    MIN (range_start_time) earlytime
    FROM
    time_range_common_employee
    WHERE
    day_of_week = '1'
    GROUP BY
    employee_id
    ) H
    )
    ) Q
    <where>
      <if test="empName!=null and empName!=''">
        Q.employee_name like #{empName}
      </if>
      <if test="deptName!=null and deptName!=''">
        and Q.employee_department_name like #{deptName}
      </if>
      <if test="rangeStartTime!=null and rangeStartTime!=''">
        and Q.range_start_time between #{rangeStartTime} and #{rangeEndTime}
      </if>
      <if test="rangeEndTime!=null and rangeEndTime!=''">
        and Q.range_end_time between #{rangeStartTime} and #{rangeEndTime}
      </if>
      <if test="openType!=null and openType!=''">
        and Q.range_door_open_type LIKE #{openType}
      </if>
    </where>
    ORDER BY Q.lasttime DESC
  </select>

  <!--查询有门禁权限的人员的一周开门时间段-->
  <select id="selectAWeekOpenTime" parameterType="String" resultType="map">
   SELECT
	X.*, P .door_open_start_time,
	door_open_end_time
    FROM
        (
            SELECT
                day_of_week,
                range_start_time,
                range_end_time,
                range_door_open_type,
                range_flag_id,
                COALESCE (is_ditto, '') AS is_ditto,
                is_all_day
            FROM
                time_range_common_employee
            WHERE
                employee_id = #{empId}
            ORDER BY
                range_start_time DESC
        ) X
    LEFT JOIN door_employee_permission P ON X.range_flag_id = P .range_flag_id
  </select>

  <!--通过人员id查询该人对应的所有和门关联的信息-->
  <select id="selectByEmployeeIdAndDoorId" resultMap="BaseResultMap" parameterType="java.lang.String" >
    SELECT
    <include refid="Base_Column_List" />
    FROM
    door_employee
    WHERE
    employee_id = #{employeeId,jdbcType=VARCHAR}
    AND door_id = #{doorId,jdbcType=VARCHAR}
  </select>

  <!--更新人员信息通过rangeFlagId-->
  <delete id="deleteByRangeFlagId" parameterType="java.lang.String" >
    delete from door_employee
    where range_flag_id = #{rangeFlagId,jdbcType=VARCHAR}
  </delete>
</mapper>