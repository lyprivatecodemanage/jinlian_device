<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiangshangban.device.dao.DoorEmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.xiangshangban.device.bean.DoorEmployee" >
    <id column="employee_id" property="employeeId" jdbcType="VARCHAR" />
    <result column="employee_name" property="employeeName" jdbcType="VARCHAR" />
    <result column="door_id" property="doorId" jdbcType="VARCHAR" />
    <result column="door_name" property="doorName" jdbcType="VARCHAR" />
    <result column="range_flag_id" property="rangeFlagId" jdbcType="VARCHAR" />
    <result column="device_id" property="deviceId" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    employee_id, employee_name, door_id, door_name, range_flag_id, device_id, create_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from door_employee
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from door_employee
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    insert into door_employee (employee_id, employee_name, door_id, 
      door_name, range_flag_id, device_id, create_date)
    values (#{employeeId,jdbcType=VARCHAR}, #{employeeName,jdbcType=VARCHAR}, #{doorId,jdbcType=VARCHAR}, 
      #{doorName,jdbcType=VARCHAR}, #{rangeFlagId,jdbcType=VARCHAR}, #{deviceId,jdbcType=VARCHAR}, #{createDate,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    insert into door_employee
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="employeeId != null" >
        employee_id,
      </if>
      <if test="employeeName != null" >
        employee_name,
      </if>
      <if test="doorId != null" >
        door_id,
      </if>
      <if test="doorName != null" >
        door_name,
      </if>
      <if test="rangeFlagId != null" >
        range_flag_id,
      </if>
      <if test="deviceId != null" >
        device_id,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="employeeId != null" >
        #{employeeId,jdbcType=VARCHAR},
      </if>
      <if test="employeeName != null" >
        #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="doorId != null" >
        #{doorId,jdbcType=VARCHAR},
      </if>
      <if test="doorName != null" >
        #{doorName,jdbcType=VARCHAR},
      </if>
      <if test="rangeFlagId != null" >
        #{rangeFlagId,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null" >
        #{deviceId,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    update door_employee
    <set >
      <if test="employeeName != null" >
        employee_name = #{employeeName,jdbcType=VARCHAR},
      </if>
      <if test="doorId != null" >
        door_id = #{doorId,jdbcType=VARCHAR},
      </if>
      <if test="doorName != null" >
        door_name = #{doorName,jdbcType=VARCHAR},
      </if>
      <if test="rangeFlagId != null" >
        range_flag_id = #{rangeFlagId,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null">
        device_id = #{deviceId,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=VARCHAR},
      </if>
    </set>
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
    update door_employee
    set employee_name = #{employeeName,jdbcType=VARCHAR},
      door_id = #{doorId,jdbcType=VARCHAR},
      door_name = #{doorName,jdbcType=VARCHAR},
      range_flag_id = #{rangeFlagId,jdbcType=VARCHAR},
      device_id = #{deviceId,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=VARCHAR}
    where employee_id = #{employeeId,jdbcType=VARCHAR}
  </update>

  <!--非自动生成-->

  <select id="findIfExist" resultMap="BaseResultMap" parameterType="com.xiangshangban.device.bean.DoorEmployee">
    SELECT * FROM door_employee
    WHERE 1=1
    <if test="doorId != null and doorId != ''" >
      AND door_id = #{doorId,jdbcType=VARCHAR}
    </if>
    <if test="doorName != null and doorName != ''" >
      AND door_name = #{doorName,jdbcType=VARCHAR}
    </if>
    <if test="employeeId != null and employeeId != ''" >
      AND employee_id = #{employeeId,jdbcType=VARCHAR}
    </if>
    <if test="employeeName != null and employeeName != ''" >
      AND employee_name = #{employeeName,jdbcType=VARCHAR}
    </if>
    <if test="deviceId != null and deviceId != ''" >
      AND device_id = #{deviceId,jdbcType=VARCHAR}
    </if>
  </select>

  <!--###############<授权中心>####################-->
  <!--查询门所关联设备上下发的人员的信息：手机号、人脸、NFC数量-->
  <select id="queryDoorEmployeeInfo" parameterType="Map" resultType="map">
      SELECT
      W.*
      FROM
      (
      SELECT
      E.door_id,
      COALESCE (door_name, '') AS door_name,
      device_id,
      is_unbind,
      COALESCE (device_name, '') AS device_name,
      COALESCE (F.employee_phone, '') AS employee_phone,
      COALESCE (employee_face, '') AS employee_face,
      COALESCE (employee_nfc, '') AS employee_nfc
      FROM
      (
      <!--查询当前设备上下发成功的人员信息-->
      SELECT
      S.*, Q.employee_id
      FROM
      (
      <!--查询该公司的门以及门关联的设备-->
      SELECT
      A .*, B.device_name,
      is_unbind
      FROM
      (
      SELECT
      door_id,
      door_name,
      device_id,
      company_id
      FROM
      door_
      WHERE
      company_id = #{companyId,jdbcType=VARCHAR}
      ) A
      LEFT JOIN device_ B ON A .device_id = B.device_id
      ) S
      LEFT JOIN (
      SELECT DISTINCT
      H.*
      FROM
      (
      SELECT
      E.employee_id,
      device_id,
      (
      CASE
      WHEN info_status = '2'
      AND permi_status = '2' THEN
      '2'
      WHEN info_status = '0'
      OR permi_status = '0' THEN
      '0'
      WHEN info_status = '1'
      OR permi_status = '1' THEN
      '1'
      WHEN info_status = '3'
      OR permi_status = '3' THEN
      '3'
      END
      ) status
      FROM
      (
      SELECT DISTINCT
      C .*, D.action_code permi,
      D.status permi_status
      FROM
      (
      SELECT
      X.*
      FROM
      (
      SELECT
      A .*, B.status info_status
      FROM
      (
      SELECT
      device_id,
      MAX (send_time) send_time,
      employee_id,
      action_code info
      FROM
      door_cmd
      WHERE
      action_code IN ('2001')
      GROUP BY
      device_id,
      employee_id,
      action_code
      ORDER BY
      send_time DESC
      ) A
      LEFT JOIN door_cmd B ON A .info = B.action_code
      AND A .send_time = B.send_time
      AND A .employee_id = B.employee_id
      ORDER BY
      A .send_time DESC
      ) X
      LEFT JOIN door_ d ON (X.device_id = d.device_id)
      WHERE
      X.send_time > d.bind_date
      ) C
      INNER JOIN (
      SELECT
      X.*
      FROM
      (
      SELECT
      A .*, B.status
      FROM
      (
      SELECT
      device_id,
      MAX (send_time) send_time,
      employee_id,
      action_code
      FROM
      door_cmd
      WHERE
      action_code IN ('3001')
      GROUP BY
      device_id,
      employee_id,
      action_code
      ORDER BY
      send_time DESC
      ) A
      LEFT JOIN door_cmd B ON A .action_code = B.action_code
      AND A .send_time = B.send_time
      AND A .employee_id = B.employee_id
      ORDER BY
      A .send_time DESC
      ) X
      LEFT JOIN door_ d ON (X.device_id = d.device_id)
      WHERE
      X.send_time > d.bind_date
      ) D ON C .employee_id = D.employee_id
      ) E
      ) H
      ) Q ON S.device_id = Q.device_id
      AND Q.status = '2'
      ) E
      LEFT JOIN employee_ F ON E.employee_id = F.employee_id
      AND E.company_id = F.employee_company_id
      ) W
      <where>
          <if test="doorName!=null and doorName!=''">
              W.door_name LIKE #{doorName}
          </if>
      </where>
      ORDER BY
      CAST (W.door_id AS INTEGER)
  </select>

  <!--查询门的人员命令下发的时间最后时间-->
  <select id="selectSendTime" parameterType="String" resultType="String">
    SELECT
    COALESCE (MAX (send_time),'') AS sendtime
    FROM
    door_cmd
    WHERE
    action_code IN ('2001','2002','3001')
    AND device_id = (
    SELECT
    device_id
    FROM
    door_
     <where>
       <if test="doorId!=null and doorId!=''">
         door_id = #{doorId}
       </if>
     </where>
   )
   group by device_id
  </select>


  <!--根据设备id查询门的id-->
  <select id="selectDoorIdByDeviceId" parameterType="String" resultType="String">
   SELECT
	door_id
   FROM
        door_
   WHERE
        device_id = #{ deviceId }
  </select>

  <!--获取门关联人员相关联的指令的最新下发时间和状态-->
  <select id="selectRelateEmpCommand" parameterType="String" resultType="map">
    SELECT
	X.*
    FROM
        (
            SELECT
                action_code,
                COALESCE (send_time,'') AS send_time,
                COALESCE (status,'') AS status,
                employee_id
            FROM
                door_cmd
            <where>
                <if test="employeeId != null and employeeId!=''">
                    employee_id = #{employeeId}
                </if>
            </where>
        ) X
    INNER JOIN (
        SELECT
            employee_id,
            MAX (send_time) lasttime
        FROM
            door_cmd
        WHERE
            action_code IN ('2001', '2002', '3001')
        AND status NOT IN
        <if test="employeeId == null">
            ('5','6')
        </if>
        <if test="employeeId !=null and employeeId !=''">
            ('4','5','6')
        </if>
        AND device_id = #{deviceId}
        GROUP BY
            employee_id
    ) Y ON X.send_time = Y.lasttime
    AND X.employee_id = Y.employee_id
  </select>

  <!--查询门关联设备上下发的人员的周一最早打卡时间和员工的基本信息-->
  <select id="selectMondayPunchCardTimeAndEmpInfo" parameterType="Map" resultType="map">
      SELECT DISTINCT
      Q.*
      FROM
      (
      SELECT
      S.*, COALESCE (W.range_door_open_type, '') range_door_open_type
      FROM
      (
      SELECT
      X.*, COALESCE (Y.range_start_time, '') AS range_start_time,
      COALESCE (range_end_time, '') AS range_end_time
      FROM
      (
      <!--查询当前门上下发的人员id、名称、以及部门-->
      SELECT
      A .employee_id,
      device_id,
      create_date,
      COALESCE (B.employee_name, '') employee_name,
      COALESCE (employee_department_name,'') employee_department_name
      FROM
      door_employee A
      LEFT JOIN employee_ B ON A .employee_id = B.employee_id
      AND B.employee_company_id = (
      SELECT
      company_id
      FROM
      door_
      WHERE
      door_id = #{ doorId }
      )
      WHERE
      A .door_id = #{ doorId }

      ) X
      LEFT JOIN (
      SELECT <!--查询该人员周一最早的开门时间段-->
      employee_id,
      device_id,
      COALESCE (MIN(range_start_time), '') range_start_time,
      COALESCE (MIN(range_end_time), '') range_end_time
      FROM
      time_range_common_employee
      WHERE
      day_of_week = '1'
      GROUP BY
      employee_id,
      device_id
      ) Y ON X.device_id = Y.device_id
      AND X.employee_id = Y.employee_id
      ) S
      LEFT JOIN ( <!--拼接该人员周一最早开门时间段的开门方式-->
      SELECT DISTINCT
      employee_id,
      device_id,
      range_door_open_type
      FROM
      time_range_common_employee
      WHERE
      device_id IN (
      SELECT
      device_id
      FROM
      door_employee
      WHERE
      door_id = #{ doorId }
      )
      ) W ON S.employee_id = W.employee_id
      AND S.device_id = W.device_id
      ) Q
      <where>
          <if test="empName!=null and empName!=''">
              Q.employee_name like #{empName}
          </if>
          <if test="deptName!=null and deptName!=''">
              and Q.employee_department_name like #{deptName}
          </if>
          <if test="rangeStartTime!=null and rangeStartTime!=''">
              and Q.range_start_time between #{rangeStartTime} and #{rangeEndTime}
          </if>
          <if test="rangeEndTime!=null and rangeEndTime!=''">
              and Q.range_end_time between #{rangeStartTime} and #{rangeEndTime}
          </if>
          <if test="openType!=null and openType!=''">
              and Q.range_door_open_type LIKE #{openType}
          </if>
      </where>
       ORDER BY Q.create_date DESC
  </select>


  <!--查询有门禁权限的人员的一周开门时间段-->
  <select id="selectAWeekOpenTime" parameterType="Map" resultType="map">
      SELECT
      X.*, COALESCE (P .door_open_start_time, '') AS door_open_start_time,
      COALESCE (door_open_end_time, '') AS door_open_end_time
      FROM
      (
      SELECT
      employee_id,
      COALESCE (day_of_week, '') AS day_of_week,
      COALESCE (range_start_time, '') AS range_start_time,
      COALESCE (range_end_time, '') AS range_end_time,
      COALESCE (range_door_open_type, '') AS range_door_open_type,
      device_id,
      COALESCE (is_ditto, '') AS is_ditto,
      is_all_day
      FROM
      time_range_common_employee
      WHERE
      employee_id = #{ empId }
      AND device_id = (
      SELECT
      device_id
      FROM
      door_
      WHERE
      door_id = #{ doorId }
      )
      ORDER BY
      range_start_time DESC
      ) X
      LEFT JOIN door_employee_permission P ON X.employee_id = P .employee_id
      AND X.device_id = P .device_id
  </select>

  <!--通过人员id查询该人对应的所有和门关联的信息-->
  <select id="selectByEmployeeIdAndDoorId" resultMap="BaseResultMap" parameterType="java.lang.String" >
    SELECT
    <include refid="Base_Column_List" />
    FROM
    door_employee
    WHERE
    employee_id = #{employeeId,jdbcType=VARCHAR}
    AND door_id = #{doorId,jdbcType=VARCHAR}
  </select>

  <!--更新人员信息通过rangeFlagId-->
  <delete id="deleteByRangeFlagId" parameterType="java.lang.String" >
    delete from door_employee
    where range_flag_id = #{rangeFlagId,jdbcType=VARCHAR}
  </delete>

  <!--删除人员和门的关联通过doorId和employeeId-->
  <delete id="deleteByDoorIdAndEmployeeId" parameterType="Map">
    delete from door_employee
    where door_id = #{doorId} and employee_id = #{employeeId}
  </delete>

  <!--判断当前门当前人员信息是否在door_employee表中存在-->
  <select id="getDoorEmpByDoorIdAndEmpId" parameterType="Map" resultType="String">
    select employee_id from door_employee where door_id = #{doorId} and employee_id = #{employeeId}
  </select>

  <!--添加人员权限信息到door_employee表中-->
  <insert id="insertEmpInfoToDoorEmployee" parameterType="Map">
    insert into door_employee
    values(
            #{employee_id},
            #{employee_name},
            #{door_id},
            #{door_name},
            #{range_flag_id}
           )
  </insert>
    <!--更新人员权限信息-->
    <update id="updateEmpInfoToDoorEmployee" parameterType="Map">
        update door_employee
        set
        employee_id = #{employee_id},
        employee_name = #{employee_name},
        door_id = #{door_id},
        door_name = #{door_name},
        range_flag_id = #{range_flag_id}
        where
        door_id = #{door_id}
        and
        employee_id = #{employee_id}
    </update>

    <!--删除当前门下发的所有人员-->
    <delete id="delIssueEmployeeFromDoor" parameterType="String">
        delete from door_employee where door_id = #{doorId}
    </delete>

    <!--查找某个人在哪些设备上有开门权限-->
    <select id="selectDeviceIdOfPermissionEffectiveByEmployeeId" resultType="java.util.Map" parameterType="java.lang.String" >
        SELECT
	    R.device_id AS "deviceId"
        FROM
	    (
		SELECT
			d.device_id
		FROM
			door_employee de
		LEFT JOIN door_ d ON de.door_id = d.door_id
		WHERE
			employee_id = #{employeeId,jdbcType=VARCHAR}
	    ) R
        LEFT JOIN device_ dd ON R.device_id = dd.device_id
        WHERE
	    dd.company_id = #{companyId,jdbcType=VARCHAR}
    </select>

    <select id="selectAllByDoorId" resultMap="BaseResultMap" parameterType="java.lang.String" >
        select
        <include refid="Base_Column_List" />
        from door_employee
        where door_id = #{doorId,jdbcType=VARCHAR}
    </select>

    <select id="selectByRangeFlagId" resultMap="BaseResultMap" parameterType="java.lang.String" >
        select
        <include refid="Base_Column_List" />
        from door_employee
        where range_flag_id = #{range_flag_id,jdbcType=VARCHAR}
    </select>

    <select id="temp" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List" />
        FROM
        door_employee
        WHERE
        device_id IS NULL
        OR device_id = ''
        OR create_date IS NULL
        OR create_date = ''
    </select>

    <update id="updateByRangeFlagId" parameterType="com.xiangshangban.device.bean.DoorEmployee" >
        update door_employee
        <set >
            <if test="employeeName != null" >
                employee_name = #{employeeName,jdbcType=VARCHAR},
            </if>
            <if test="doorId != null" >
                door_id = #{doorId,jdbcType=VARCHAR},
            </if>
            <if test="doorName != null" >
                door_name = #{doorName,jdbcType=VARCHAR},
            </if>
            <if test="employeeId != null" >
                employee_id = #{employeeId,jdbcType=VARCHAR},
            </if>
            <if test="deviceId != null">
                device_id = #{deviceId,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=VARCHAR},
            </if>
        </set>
        where range_flag_id = #{rangeFlagId,jdbcType=VARCHAR}
    </update>
</mapper>