<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiangshangban.device.dao.DoorMapper" >
  <resultMap id="BaseResultMap" type="com.xiangshangban.device.bean.Door" >
    <id column="door_id" property="doorId" jdbcType="VARCHAR" />
    <result column="door_name" property="doorName" jdbcType="VARCHAR" />
    <result column="device_id" property="deviceId" jdbcType="VARCHAR" />
    <result column="operate_time" property="operateTime" jdbcType="VARCHAR" />
    <result column="operate_employee" property="operateEmployee" jdbcType="VARCHAR" />
    <result column="company_id" property="companyId" jdbcType="VARCHAR" />
    <result column="bind_date" property="bindDate" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    door_id, door_name, device_id, operate_time, operate_employee, company_id, bind_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from door_
    where door_id = #{doorId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from door_
    where door_id = #{doorId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.xiangshangban.device.bean.Door" >
    insert into door_ (door_id, door_name, device_id, 
      operate_time, operate_employee, company_id, bind_date)
    values (#{doorId,jdbcType=VARCHAR}, #{doorName,jdbcType=VARCHAR}, #{deviceId,jdbcType=VARCHAR}, 
      #{operateTime,jdbcType=VARCHAR}, #{operateEmployee,jdbcType=VARCHAR}, #{companyId,jdbcType=VARCHAR},
      #{bindDate,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xiangshangban.device.bean.Door" >
    insert into door_
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="doorId != null" >
        door_id,
      </if>
      <if test="doorName != null" >
        door_name,
      </if>
      <if test="deviceId != null" >
        device_id,
      </if>
      <if test="operateTime != null" >
        operate_time,
      </if>
      <if test="operateEmployee != null" >
        operate_employee,
      </if>
      <if test="companyId != null" >
        company_id,
      </if>
      <if test="bindDate != null" >
        bind_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="doorId != null" >
        #{doorId,jdbcType=VARCHAR},
      </if>
      <if test="doorName != null" >
        #{doorName,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null" >
        #{deviceId,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        #{operateTime,jdbcType=VARCHAR},
      </if>
      <if test="operateEmployee != null" >
        #{operateEmployee,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="bindDate != null" >
        #{bindDate,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiangshangban.device.bean.Door" >
    update door_
    <set >
      <if test="doorName != null" >
        door_name = #{doorName,jdbcType=VARCHAR},
      </if>
      <if test="deviceId != null" >
        device_id = #{deviceId,jdbcType=VARCHAR},
      </if>
      <if test="operateTime != null" >
        operate_time = #{operateTime,jdbcType=VARCHAR},
      </if>
      <if test="operateEmployee != null" >
        operate_employee = #{operateEmployee,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        company_id = #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="bindDate != null" >
        bind_date = #{bindDate,jdbcType=VARCHAR},
      </if>
    </set>
    where door_id = #{doorId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiangshangban.device.bean.Door" >
    update door_
    set door_name = #{doorName,jdbcType=VARCHAR},
      device_id = #{deviceId,jdbcType=VARCHAR},
      operate_time = #{operateTime,jdbcType=VARCHAR},
      operate_employee = #{operateEmployee,jdbcType=VARCHAR},
      company_id = #{companyId,jdbcType=VARCHAR},
      bind_date = #{bindDate,jdbcType=VARCHAR}
    where door_id = #{doorId,jdbcType=VARCHAR}
  </update>

  <!--非自动生成-->

  <select id="findDoorIdByDeviceId" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT door_id,door_name FROM door_ WHERE device_id = #{deviceId,jdbcType=VARCHAR}
  </select>

  <select id="findAllByDoorId" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT * FROM door_ WHERE door_id = #{doorId,jdbcType=VARCHAR}
  </select>

  <select id="selectAllDoorByCompanyId" resultMap="BaseResultMap" parameterType="java.lang.String">
    SELECT
	de.device_id,
	dr.door_id,
	dr.door_name,
	dr.company_id
    FROM
	device_ de
    LEFT JOIN door_ dr ON (de.device_id = dr.device_id)
    WHERE
	de.company_id = #{companyId,jdbcType=VARCHAR}
  </select>

    <!--################新添加部分#################-->
  <!--根据门名称查询门信息-->
  <select id="getDoorInfo" parameterType="map" resultType="map">
    SELECT
    W.door_id,
    COALESCE (door_name, '') AS door_name,
    COALESCE (operate_time, '') AS operate_time,
    device_id,
    company_id,
    COALESCE (device_name, '') AS device_name,
    operate_employee AS employee_id,
    COALESCE (employee_name, '') AS employee_name
    FROM
    (
    SELECT
    C .*, D.employee_name
    FROM
    (
    SELECT
    A .*, B.door_id,
    door_name,
    operate_time,
    operate_employee
    FROM
    (
    SELECT
    device_id,
    device_name,
    company_id
    FROM
    device_
    WHERE
    company_id = #{companyId}
    ) A
    INNER JOIN door_ B ON A .device_id = B.device_id
    ) C
    LEFT JOIN employee_ D ON C .company_id = D.employee_company_id
    AND C .operate_employee = D.employee_id
    ) W
    <where>
      <if test="doorName!=null and doorName!=''">
        and W.door_name like #{doorName}
      </if>
    </where>
    order by W.operate_time desc
  </select>

  <!--删除门信息(解除门和设备的关联关系)-->
  <delete id="delDoor" parameterType="String">
    DELETE
    FROM
    door_
    WHERE
    door_id = #{ doorId }
  </delete>

  <!--通过设备id查询门信息-->
  <select id="findAllByDeviceId" resultMap="BaseResultMap" parameterType="java.lang.String">
   SELECT * FROM door_ WHERE device_id = #{ deviceId,jdbcType = VARCHAR }
  </select>

  <!--查询door表主键的最大值-->
  <select id="selectPrimaryKeyFromDoor" resultType="String">
     select max(cast(door_id as integer)) from door_
  </select>

  <update id="updateDeviceIdNull" parameterType="java.lang.String">
      update door_ set device_id = null WHERE door_id = #{doorId,jdbcType=VARCHAR}
  </update>
</mapper>